#!/bin/bash

# throw errors when using undefined variables
set -o nounset

# print an error and exit
__err () {
  printf '%s' "$(tput setaf 1)"
  printf '%s\n' "Error: $@"
  printf '%s' "$(tput sgr 0)"
  exit 1
}

# global stack of declared packages
declare -ag __pkg_stack
declare -ag __env_stack

# the current package being declared
declare __pkg

__push_stack () {
  eval "${1}+=(\"$2\")"
}

__pop_stack () {
  local ref="${1}[@]"
  local stack=("${!ref}")
  eval $2="${stack[-1]}"
  eval "${1}=(${stack[@]:0:${#stack[@]}-1})"
}

# start a package definition
# should be the first line in a package file
package () {
  if [ "x$1" = "x" ]; then
    __err "No package name specified."
  fi
  if (( $# > 2 )); then
    __err "Only one package per file."
  fi
  # TODO error check package name
  __pkg="$1"
  __push_stack "__pkg_stack" "$1"
}

# get all the defined variables and functions
__getenv () {
  echo "$(compgen -vA function | sort)"
}

# import a package
import () {
  if [ "x$1" = "x" ]; then
    __err "No script name passed to import."
  fi

  local __cwd=`pwd`
  cd "$(dirname "$1")"

  local __old_env="$(__getenv)"
  source "$(basename "$1")"
  local __new_env="$(__getenv)"

  # get the variables and functions declared in this file
  local toScope=$(comm -13 <(echo "$__old_env") <(echo "$__new_env"))

  local package
  local decl
  __pop_stack "__pkg_stack" package
  for decl in $toScope; do
    [[ "$decl" = "__"* ]] && unset "$decl" && continue

    # if $decl is a function...
    if declare -f "$decl" > /dev/null; then
      eval "${package}__$(declare -f "$decl")"

    # else it's a variable, so just grab its value
    else
      eval "${package}__$decl='${!decl}'"
    fi

    unset "$decl"
  done

  cd "$__cwd"
}
